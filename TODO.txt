Version 2:

Bulk operations refactor: 
- Disregard the grid view for now as it adds an unnecessary layer of complexity 
-- Render the list view by default  x
-- Remove the link to the grid view x
-- Highlight the list view icon on the root page  x
-- Delete the list_view indivdual action turbo_streams? Check the controller for residual code x 
-- BUG: view icons dont highlight after form submission on flashcards index x
-- BUG: when submit button is clicked without any checkboxes selected  x 

Flashcards page
-- Remove bold font, change "front" => "English", "back" => "Portuguese" x
-- Change status to "In Deck" and "Not in Deck" x
-- Add paginate gem


Questions: 
- check_deck_flashcards in decks_controller (used in _navbar partial)
- _navbar is a mess-
- Turbo frame "results" and "default" for flashcards. 
- Turbo advcance with search breaks shit 
- The checkbox select-all on index page might mess with the UI. I prefer a request?
- How to display error messages for Pundit unauthorized access in turbo streams (used in _flashcard.html.erb)
- How to prevent turbo frames from updating before validations execute (eg decrement numericality to negative)
- How to test renders for failed validations (deck_flashcards incorrect count is negative, for example)

feature branch: 
2. Install interactors gem and remove callbacks from app
5. Add selections to index page with "add selected" and "add all" to deck options. 
6. Prune flashcards that show on flashcards page 
7. Database accepting negative values in deckflashcard 
Create the study controller to handle the studying things 

Bug list: 
- After sign in, "Signed in successfully" flash notice appears in body and in each flashcard
- The notice doesnt disappear from the body 

Current work: 
- Add a select button to each flashcard 
- Create a select all button on the flashcard page 
- Create an "Add Selection to Deck" button on the flashcard page

App will be for Top 100 Portuguese phrases to learn: 
- The phrases are in the csv file 
- The CSV file contains in column 1 the "front" of the flashcard in english and in column 2 the back in portuguese. 
- I need to write something to convert each row of the CSV file into a flashcard entry
- I can create a ruby hash with the key:value of front:back 
- for each k,v, Flashcard.create!(front: k, back: v) 
- Create a rake task to push this to Heroku? 
- Use Roo gem to parse CSV files 


Flashcard data to retrieve: 
- list of 100 most common spoken words used in brazilian portuguese 
- word list contains: pt word, en word, PoS, phonetic, freq rank, 
- verbs must be extracted and separated by regular and irregular


Categories: 
Mastered:     attempts > 5 && accuracy >= 95%
Progressing:  attempts > 5 && accuracy > 65%
Learning:     attempts <= 5 || attempts > 5 && accuracy <= 65%
New:          attempts == 0




Rethink the /study route 
- Problem: I can not explain why the Studies controller exists. 

resource :study, controller: 'studies' do
          resources :deck_flashcards, only: [:show, :update] do 
            member do
              post :mark_correct
              post :mark_incorrect
            end
          end
        end

The study page should be replaced by deck_flashcards because all it effectively does is display a the deck's flashcards. 

Process: 
- Ensure routes and actions for mark_correct, mark_incorrect remain stable 

new TODO: 
- Convert specs to shoulda matchers x
- convert debounace to loadash 
- learn Pundits x
- decks policy ask about scope  x
- Handling flash errors in turbo streams/frames x

- Get rid of the 'all' query x 
The problem: 
- The DeckFlashcard category "all" is being passed through the app as a query parameter instead of it being calculated by internal logic.

- The NavBar links to Deck#show ("deck" in UI) with the query parameter "category: all"
- Deck#show assigns the result of deck.deck_flashcards.by_category(@category) scope to @categorized_deck_flashcards   
- scope :by_category, -> (category) {category == 'all' ? all : where(category: category)} #Fix 'all'
- _stats_header:   <%= link_to 'All Cards', user_deck_path(current_user.id, @deck, category: 'all'), class: user_deck_classes('all'), data: {turbo_stream: true} %> <!-- add remote: true ?-->

- The NavBar should not require a parameter because the default display should be category: "all"
- If params[:category] is nil, the scope query should return DeckFlashcard.all



Overview of app 
- User signs up 
- User is automatically assigned a Deck 
- The study page can only be accessed after when the user has flashcards in their deck. 
- 

Features  
UI:
- Flip animiation on Flashcard 
- Flash[:alert] styling  
Backend:
- Automated assignment of deck_flashcard category 
-- use spaceship operator
- Handling !current_user (malicious URL's)
- Transition from positional arguments to keyword arguments?
--   before_action :set_flashcard, except: :index in flashcards_controller

Completed:
- Experiment with hooks 

refactor06: 
- refactor decks#show. skinny controller, fat model. x
- refactor deck.update_statistics x
- reduce length of names of variables and methods. x 
- Experiment with hooks

current refactor: 
- refactor controllers

refactor: 
- Handle the study link in navbar for new user or user without deck_flashcards.
-- Solution is likely to have a placeholder deck_flashcard in each deck that renders when the deck is empty
-- The above solution is possible but unnecessarily complicated. A better solution is to conditionally render the study link. If deck_flashcards is empty, render the Flashcard page with alert that says "Please add flashcards before proceeding to study "
- BUG: When user removes deck_flashcard that is the first deck_flashcard and clicks 'study', page breaks.

- clean github branches x
- Show username in profile when logged in x
- Delete deck_flashcard_statistics. The data is now stored in deck_flashcard x 


Routing refactor:

Goal is to cleanup the routing in the studies resource. I want the URL for the study flashcard page to be 
user/user_id/deck/deck_id/study/deck_flashcards/:id 

The ID is determined by the current deck_flashcard displayed on the page. 

rails g resource deck_flashcards
nest the route under study 

move all logic from the studies controller 
update the routes in the view 
move the turbo_stream files 

DELETE DECK_FLASHCARD_STATISTICS

Associations: 

Flashcard {
  has_many: deck_flashcards
}

User {
  has_one :deck 
}

Deck {
  belongs_to :user
  has_many :deck_flashcards
  has_one :deck_statistics
}

Deck_Statistics {
  belongs_to :deck 
}

Deck_Flashcards {
  belongs_to :deck 
  belongs_to :flashcard
}

Flashcard_Statistic {
  delete?
}

Schema: 

table 'flashcards': id, front: 'string', back: 'string'
table 'user': id, deck_id
table 'decks': id, user_id 
table 'deck_statistics': id, deck_id, correct_count, incorrect_count, total_count, accuracy
table 'deck_flashcards': id, deck_id, flashcard_id, correct_count, incorrect_count, total_count, accuracy 



Updates:
  - General 
    - GuestUser functionality (incapable)
    - Navbar changes based on Guest clicks (incapable)
  - Homepage: 
    - Temporary: require login. autofill guest account (incapable)
    - change buttons & statistics for unregistered users. make them 'greyed out' so its like a preview. (needs GuestUser functionality)
    - Click flashcard to show back of flashcard 
    -- https://medium.com/@grahamflas/how-to-implement-a-card-flip-with-html-and-css-222db9b0476c
    - Fill in the flashcard details page. 
  - Decks / flashcardstatistics: 
    - Create logic to set and update accuracy automatically  x
    - Create logic to set the category of flashcard_statistics automatically
    - Do something with the search form 
  - Study: 
    - "Paginate" the flashcards with a progress bar 
    - Center the study cards x
  - Sign-in page 
    - Build UI x
    - remove unused mark_correct and mark_incorrect from flashcards and routes x 

Database: 
- The category column in Flashcard should be removed. We can not store the category in the Flashcard table because that category is supposed to be user dependent. 
- Where should the category column be?

Decks page.

In order to retrieve flashcard_statistics from the decks page, what are the options?
- create an association between decks, flashcards, and flashcard_statistics?
- run a query

Highight buttons on deck page based on current page 

When the user clicks a button, I want to update the decks stats and decks flashcard stats to display the fitered stats by category. When the user clicks the button, it can send a post request to the server with the action labelled by the name of the filter. 

Profile dropdown: 

menu = document.querySelector('#user-dropdown-menu')
button = document.querySelector('#user-menu-button')
button.addEventListener('click', () => {
  menu.classList.toggle('hidden');
});

Refactor.

Controllers: 
flashcards
flashcard_statistics 
users
decks


Flashcards:

The homepage will render the flashcards index page. It will display a (cut off) list of all the available flashcards.

The flashcards show page should render the details of individual flashcards. 

Decks: 

Deck will be an independent resource.
Deck belongs_to User 
User has_one deck  
User can add cards to its deck. 
Link to "my-deck" will render the deck show page.




Version 1:

The lab 

First, update the navbar. Replace 'Projects' with 'My Cards'. 

1. Next to 'My Cards', add a counter.

Index section redesign
- Render add/remove buttons beneath the statistics. z
- Add/remove buttons update the counter next to 'My Cards' x

'My Cards'
- The index page 'Home' will display all flashcards 
- The 'my cards' page will display only the cards that the user selected from the index page. 

The my cards section will be organized based on the users memory level*: 
- New Word
- Learning 
- Progressing  
- Mastered

*The memory level logic will be written later. 

Adjusted plan: 

1. Create a new resource called deck and nest it as a resource of user. 
2. Deck will have a belongs_to has_one relationship with User. 
2. Create the UI

Search field in flashcards/index . 

The search field will start simple. The user can sort by typing the name. After that's working, i will add functionality for the user to select a predefined filter in the collection.

When the user clicks search, it sends a GET request to the server with the relevent data in the params hash. The server routes the request to the index action in the Flashcard controller, which invokes the class method "search" on the Flashcard model. The controller stores the response from search into the @flashcards instance variable and renders the appropriate view.  

1. Edit the form in view template to pass the appropiate data to the server in the params hash.
2. Update the index action in the Flashcard controller. The index action will assign Flashcard.search to the instance variable @flashcards. 
3. Update the Flashcard.rb model. Create a class method named "search" that finds all the Flashcard names (defined by Flashcard.front) that match the search query.

Without learning SQL, I'll just need to generate the query from GPT.



flashcardsindex 

The index page will display all the flashcards. Do not worry about the concern of excessive number of flashcards (the display can later be trimmed). Each flashcard will show the UI and the user's statistics. 

The index page will also feature a formfield to search and filter the flashcards. 

Steps: 
1. Build the UI on the index page for the flashcard display 

Logic changes: 

- Change the routes file to support POST requests by the correct and incorrect button. 

resources :flashcards do
  member do
    post :mark_correct
    post :mark_incorrect
  end
end

- The controller action handles the logic for when it receives the POST request of mark_correct vs mark_incorrect. 

To do this, we create controller actions with the same name as the POST request 

def mark_correct  
update_statistic(true)
render @flashcard
end 

def mark_incorrect 
update_statistic(false)
render @flashcard
end  

and a private method that handles the logic

private  

def update_statistic(is_correct) 
  flashcard = flashcard.find(params[:id])
  statistic = flashcard_statistic.find_or_initialize_by(user: current_user, flashcard: flashcard)

  if is_correct 
    statistic.correct_count += 1
  else 
    statistic.incorrect_count += 1
  end 

  statistic.save 
end 

Note that current_user is a helper method provided by devise. 

button and database changes:

I want to create a button form submission in the turbo frame that updates a counter of some sort in order to test some concepts. I will create a button that says "Like" or "Unlike" and a text field that updates the number of likes. Since there is no user model, I can't create this in the traditional way. 

I will add two buttons to the turboframe called "correct" and "incorrect," respectively. I will add two columns of type integer to the Flashcard model named "correct_count" and "incorrect_count." The count for a flashcard increment according to which button the user clicks. 

The UI will also display the statistics

My previous idea regarding the model changes was incorrect. Since I want to keep track of individual user statistics, I need to createa join model between User and Flashcard called FlashcardStatistic. 

FlashcardStatstic will have: 
correct_count: int 
incorrect_count: int 
user:references
flashcard:references 

rails g migration CreateFlashcardStatistics correct_count:integer:default=0 incorrect_count:integer:default=0 user:references flashcard:references

Model setup: 
Flashcard has_many Users 
Users has_many Flashcards
Users has_many FlashcardStatistics

Contact page: 
- Does not require a resource. 

Flashcard: 
By default, display front. When clicked, display back. 
Create entries into the flashcard database
Update index.erbfile to display the text appropriately

Simple UI. 
- A flashcard that when clicked, "flips" and displays the "back."
- Left and right arrows that when clicked, display the previous and next flashcards respectively.
- Neither should require a full page reload.

Model:
- Flashcard with front:str, back:str

Routes:
Set index to flashcard